====================================================================================
ВЫДЕЛЯЕМЫЕ ТАБЛИЦЫ
====================================================================================

* EProgram :: class:
    - userClasses : std::map<std::string, EClass;

* EClass :: class:
    - name                  : short                                 // UTF8 link to constant table
    - constants             : EConstantTable                        // Constants of class
    - parents               : std::map<std::string, EParentInfo>    // Rename, redefine, select directives of each class parent
    - creators              : std::vector<std::string>              // Names of creators
    - attributes            : std::map<short, EField>               // Fields table
    - routines              : std::map<short, EMethod>              // Method table
    - acceptableFeatures    : std::vector<MetaFeatureInfo>          // Table of all class features including inherited features

* MetaFeatureInfo :: class:
    - featureID     : std::string       // <name of defined class> + ':' + <final name of feature in defined class>
    - finalName     : std::string       // Final name of feature
    - realization   : EMethod*          // Realization of feature

* EConstantTable :: class:
    - constants : std::vector<std::pair<JvmConstantType, JvmConstantValue>>

* JvmConstantType :: enum:
    - jvm_utf8
    - jvm_string
    - jvm_class
    - jvm_nameAndType
    - jvm_fieldRef
    - jvm_methodRef

* JvmConstantValue :: union:
    - jvm_utf8          : std::string
    - jvm_string        : short         // UTF8 link to constant table
    - jvm_class         : short         // UTF8 link to constant table
    - jvm_nameAndType   : short[2]      // UTF8 links to constant table
    - jvm_fieldRef      : short[2]      // UTF8 links to constant table
    - jvm_methodRef     : short[2]      // UTF8 links to constant table

* EParentInfo :: class:
    - renameSeq     : std::vector<std::pair<std::string, std::string>>
    - redefineSeq   : std::vector<std::string>
    - selectSeq     : std::vector<std::string>

* EAttribute :: class:
    - name : short // UTF8 link to constant table
    - type : short // UTF8 link to constant table (descriptor)

* ERoutine :: class:
    - name              : short                                         // UTF8 link to constant table
    - returnType        : EType                                         // UTF8 link to constant table (descriptor)
    - formalParameters  : std::vector<std::string, EInnerVariable*>     // Formal parameters of the method
    - localVariables    : std::map<std::string, EInnerVariable*>        // Local variables of the method
    - routineBody       : EInstructionSeq                               // Instruction sequence

* EInnerVariable :: class:
    - index  : short
    - type   : EType

* EType :: class:
    - type : type_strct* // Type as node in syntax tree

====================================================================================
ПРОЦЕСС СЕМАНТИЧЕСКОГО АНАЛИЗА
====================================================================================

Этап 1. Общий проход по пользовательским классам;
    * Цель

    Собрать информацию о пользовательских классах (имена классов).
    Проверить на уникальность имена классов.

    * Шаги выполнения

    1. Для каждого класса
        1.0. Создать класс
        1.1. Записать имя класса в таблицу констант класса
            (Ошибка: Класс с таким именем уже существует)
        1.2. Записать информацию о родителях

Этап 2. Общий проход по пользовательским классам;
    * Цель

    Собрать информацию о feature пользовательских классах.

    * Шаги выполнения

    1. Для каждого класса
        1.1. Записать информацию о полях класса
        1.2. Записать информацию о методах класса
        1.3. Записать информацию о родителях

    Сложное действие 1.2. Записать информацию о полях класса
        1. Записать информацию о поле в таблицу констант текущего класса
        (Ошибка: Имя поля совпадает с именем класса, поля или метода текущего класса)
        2. Определить тип данных поля
        (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))

        3. Добавить данное поле в множество всех доступных feature текущего класса

    Сложное действие 1.3. Записать информацию о методах класса в таблицу констант текущего класса
        1. Записать информацию о методe в таблицу констант текущего класса
        (Ошибка: Имя метода совпадает с именем класса, поля или метода текущего класса)
        2. Определить тип данных метода, если метод имеет возвращаемое значение
        (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))
        3. Определить типы данных локальных переменных и формальных параметров, если
        они есть.
        (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))
        4. Добавить локальную переменную "result", если метод имеет возвращаемое значение

        5. Добавить данный метод в множество всех доступных feature текущего класса

Этап 3. Проход по блокам наследования.
    * Цель

    Определить наличие циклов в наследовании.
    Составить пространство всех полей и методов каждого класса с учётом директив наследования.

    * Шаги выполнения

    1. Для каждого класса
        1.1. Если таблица для данного класса не полностью составлена
            1.1.1. Дополнить таблицу доступных feature данного класса
                1.1.1.1. Составить таблицы родителей, если они не составлены
                (Ошибка: обнаружен цикл в цепочке наследования)

                1.1.1.2. Дополнить свою таблицу доступных feature наследованными
                feature родительских классов, используя их таблицы feature и директивы
                наследования (rename, redefine, select)
                (Ошибка: ошибки в директивах наследования)

        Ошибки в директивах наследования:
        1) rename
        (Ошибка: переименовывание несуществующего у своих родителей feature)
        (Ошибка: переименовывание feature, который уже был переименован)

        2) redefine
        (Ошибка: переопределение несуществующего у своих родителей feature)
        (Ошибка: отсутствие переопределения у feature, который указан как переопределяемый)
        (Ошибка: переопределение feature в "неконвертируемый" feature)

        3) select
        (Ошибка: выбор несуществующего feature)
        (Ошибка: выбор feature, который не нуждается в выборе)
        (Ошибка: выбор уже выбранного feature внутри одного select)
        (Ошибка: выбор уже выбранного feature в другом select)

Этап 4. Проход по полям и методам классов
    * Цель

    0) Добавить поля и методы для взаимодействия с консолью;
    1) Расставить типы данных у полей и методов;
    2) Преобразовать узлы синтаксического дерева;
    3) Расставить типы данных внутри методов классов.

    * Шаги выполнения

    1. Для каждого класса
        1.0. Добавить поле io класса CONSOLEIO в текущий класс
        1.1. Для каждого creator
            1.1.1. Связать creator с данным feature по имени с помощью таблиц всех feature
            (Ошибка: creator указан повторно)
            (Ошибка: creator указан на аттрибут)
            (Ошибка: creator указан на метод с возвращаемым значением)

        1.1. Для каждой feature
            1.1.1. Если feature является аттрибутом
                1.1.1.1. Определить тип данных аттрибута
                (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))
            1.1.2. Иначе
                1.1.2.1. Определить тип данных метода, если метод имеет возвращаемое значение
                (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))
                1.1.2.2. Определить типы данных локальных переменных и формальных параметров, если
                они есть.
                (Ошибка: Неверный тип данных (Например, класс с данным именем не существует))
                1.1.2.3. Добавить локальную переменную "result", если метод имеет возвращаемое значение
                1.1.2.4. Обработка инструкций метода

    Сложное действие. Обработка инструкций метода
        Для Create инструкций:
            (Ошибка: На верхнем уровне выражения не вызов метода)
            (Ошибка: На верхнем уровне выражения вызов метода не являющегося конструктором)
            (Ошибка: Проверка соответствия количества и типов выражений фактических параметров формальным параметрам)

            1. Приписать к узлу номер константы methodref

        Для выражения как инструкции:
            (Ошибка: выражения как инструкция не является ни void call, ни void subcall)

            1. Осуществить преобразование выражения в инструкцию.

        Для вызова метода:
            (Ошибка: не является вызовом метода)
            (Ошибка: вызов несуществующего метода)
            (Ошибка: вызов метода как инструкцию с возвращаемым значением)
            (Ошибка: вызов метода как подвыражение без возвращаемого значения)

            1. Приписать к узлу номер константы methodref по таблице констант класса;
            2. Проверить соответствие количества и типов выражений фактических параметров формальным параметрам.

        Для обращения к полю:
            (Ошибка: нет поля с данным именем)

            1. Приписать к узлу номер константы fieldref по таблице констант класса;

        Для ASSIGN инструкции:
            (Ошибка: выражение слева не является ни локальной переменной, ни полем)

            1. Проверить, что выражение слева является локальной переменной или полем из собственного доступного пространства полей;
            2. Если выражение слева является локальной переменной, то приписать к узлу номер переменной EInnerVariable;
            3. Если выражение слева является полем, то приписать к узлу ссылку на поле EField.

        Для IF инструкции:
            Узел condition должен быть выражением типа BOOLEAN

        Для LOOP инструкции:
            Узел condition должен быть выражением типа BOOLEAN

    Сложное действие. Обработка выражений
        1. Если среди операндов есть локальная переменная, то приписать к узлу номер переменной EInnerVariable;
        2. Если среди операндов есть поле, то приписать к узлу ссылку на поле EField;
        3. Проверить, что арифметические операции имеют операнды типа INTEGER и NATURAL;
        4. Если у арифметической операции имеются операнды разных типов, то:
                4.1. Если число типа NATURAL больше 2^31, то ошибка преобразования типов;
                4.2. Иначе создать узел приведения типа NATURAL к типу INTEGER;
        5. Проверить, что логические операции имеют операнды типа BOOLEAN;
        6. Арифметические операции возвращают INTEGER;
        7. Логические операции и операции сравнения возвращают BOOLEAN.
